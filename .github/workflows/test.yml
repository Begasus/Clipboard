name: Clipboard Tests

on: [ push, pull_request ]
jobs:
  linux-gcc:

    strategy:
      fail-fast: false
      matrix:
        os: [ 20.04, 22.04 ]
        gcc: [ 11, 12 ]
        x11: [ "1", "0" ]
        wayland: [ "1", "0" ]
        arch: [ i386, amd64 ]
        exclude:
          - os: 20.04
            gcc: 12
          - os: 20.04
            arch: i386
            gcc: 11

    runs-on: ubuntu-${{ matrix.os }}

    steps:
      - uses: actions/checkout@v3

      - name: Run a script
        shell: 'script -q -e -c "bash --noprofile --norc -eo pipefail {0}"'
        run: |
          NO_X11=1
          NO_WAYLAND=1
          PACKAGES=""
          GPP_NAME="g++"
          
          if [[ "${{ matrix.x11 }}" == "1" ]]
          then
            NO_X11=0
            PACKAGES="${PACKAGES} libx11-dev:${{ matrix.arch }}"
          fi
          
          if [[ "${{ matrix.wayland }}" == "1" ]]
          then
            NO_WAYLAND=0
            PACKAGES="${PACKAGES} libwayland-dev:${{ matrix.arch }}"
          fi
          
          if [[ "${{ matrix.arch }}" == "i386" ]]
          then
            PACKAGES="${PACKAGES} g++-${{ matrix.gcc }}-i686-linux-gnu"
            GPP_NAME="i686-linux-gnu-g++-${{ matrix.gcc }}"
          fi
          
          if [[ "${{ matrix.arch }}" == "amd64" ]]
          then
            PACKAGES="${PACKAGES} g++-${{ matrix.gcc }}"
            GPP_NAME="x86_64-linux-gnu-g++-${{ matrix.gcc }}"
          fi
          
          sudo dpkg --add-architecture "${{ matrix.arch }}"
          sudo apt-get update
          sudo apt-get install -y $PACKAGES

          cd build
          cmake .. \
            "-DCMAKE_CXX_COMPILER=${GPP_NAME}" \
            "-DNO_X11=${NO_X11}" \
            "-DNO_WAYLAND=${NO_WAYLAND}" \
            "-DCMAKE_BUILD_TYPE=Debug"
          
          cmake --build . -j 2
          sudo cmake --install .
          export TMPDIR=/tmp
          bash ../tests/suite.sh
  macos-arm64-amd64:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run a script
        run: |
          brew install gcc
          cd build
          cmake .. -D CMAKE_CXX_COMPILER=g++-12 -DCMAKE_BUILD_TYPE=Debug
          cmake --build . -j 2
          cmake --install .
          bash ../tests/suite.sh
  windows-amd64:
    strategy:
     matrix:
       windows: [2022, 2019]
     
    runs-on: windows-${{ matrix.windows }}

    steps:
      - uses: actions/checkout@v3

      - name: Run a script
        shell: bash
        run: |
          cd build
          cmake .. -DCMAKE_BUILD_TYPE=Debug
          cmake --build . --config Release -j 2
          echo $HOME
          export TMPDIR=/c/Users/runneradmin/AppData/Local/Temp
          cmake --install .
          #installs to C:/Program Files (x86)/Clipboard/bin/clipboard.exe
          #add to path
          export PATH=$PATH:/c/Program\ Files\ \(x86\)/Clipboard/bin
          bash ../tests/suite.sh
  freebsd-amd64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run a script
        uses: cross-platform-actions/action@v0.10.0
        with:
          operating_system: freebsd
          architecture: x86-64
          version: '13.1'
          shell: bash
          run: |
            sudo pkg install -y cmake gcc12
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Debug -DNO_X11=1 -DCMAKE_CXX_COMPILER=g++12
            cmake --build . -j 2
            sudo cmake --install .
            export TMPDIR=/tmp
            bash ../tests/suite.sh
  openbsd-amd64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run a script
        uses: cross-platform-actions/action@v0.10.0
        with:
          operating_system: openbsd
          architecture: x86-64
          version: '7.2'
          shell: bash
          run: |
            sudo pkg_add cmake g++-11.2.0p3
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Debug -DNO_X11=1 -DCMAKE_CXX_COMPILER=eg++
            cmake --build . -j 2
            sudo cmake --install .
            export TMPDIR=/tmp
            bash ../tests/suite.sh
  openbsd-arm64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run a script
        uses: cross-platform-actions/action@v0.10.0
        with:
          operating_system: openbsd
          architecture: arm64
          version: '7.2'
          shell: bash
          run: |
            sudo pkg_add cmake g++-11.2.0p3
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Debug -DNO_X11=1 -DCMAKE_CXX_COMPILER=eg++
            cmake --build . -j 2
            sudo cmake --install .
            export TMPDIR=/tmp
            bash ../tests/suite.sh
  netbsd-amd64:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Run a script
        uses: cross-platform-actions/action@v0.10.0
        with:
          operating_system: netbsd
          architecture: x86_64
          version: '9.2'
          shell: bash
          run: |
            sudo pkgin -y install cmake gcc12
            cd build
            cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_CXX_COMPILER=/usr/pkg/gcc12/bin/g++
            cmake --build . -j 2
            sudo cmake --install .
            export TMPDIR=/tmp
            bash ../tests/suite.sh